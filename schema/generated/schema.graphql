### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Partial response of archived assignment"""
type ArchivedAssignment {
  id: ID
}

type Assignment implements Node {
  """Assignment goals, things to cover, etc"""
  description: String
  id: String!
  sections(after: AssignmentSectionWhereUniqueInput, before: AssignmentSectionWhereUniqueInput, first: Int, last: Int): [AssignmentSection!]!
  state: AssignmentState
  title: String!
  topic: Topic!
  variants(after: AssignmentVariantWhereUniqueInput, before: AssignmentVariantWhereUniqueInput, first: Int, last: Int): [AssignmentVariant!]!
}

interface AssignmentAnswer {
  id: ID
}

type AssignmentAnswerOption implements Node {
  content: JSON!
  id: String!
}

input AssignmentAnswerOptionWhereUniqueInput {
  id: String
}

type AssignmentConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [AssignmentEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type AssignmentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Assignment
}

type AssignmentQuestion implements Node {
  answers(after: AssignmentAnswerOptionWhereUniqueInput, before: AssignmentAnswerOptionWhereUniqueInput, first: Int, last: Int): [AssignmentAnswer!]!
  content: JSON
  correctAnswers(after: AssignmentQuestionCorrectAnswerWhereUniqueInput, before: AssignmentQuestionCorrectAnswerWhereUniqueInput, first: Int, last: Int): [AssignmentQuestionCorrectAnswer!]!
  id: String!
  score: Int!
  type: AssignmentQuestionType!
}

type AssignmentQuestionCorrectAnswer implements Node {
  answer: AssignmentAnswer!
  id: String!
}

input AssignmentQuestionCorrectAnswerWhereUniqueInput {
  id: String
}

enum AssignmentQuestionType {
  Choice
  Document
  Image
  Number
  Text
}

input AssignmentQuestionWhereUniqueInput {
  id: String
}

type AssignmentSection implements Node {
  description: String
  id: String!
  questions(after: AssignmentQuestionWhereUniqueInput, before: AssignmentQuestionWhereUniqueInput, first: Int, last: Int): [AssignmentQuestion!]!
  title: String!
}

input AssignmentSectionWhereUniqueInput {
  id: String
}

type AssignmentState implements Node {
  closedAt: DateTime!
  id: String!
  open: Boolean!
  openedAt: DateTime!
}

type AssignmentVariant implements Node {
  id: String!
  name: String!
}

input AssignmentVariantWhereUniqueInput {
  id: String
}

type Choice implements AssignmentAnswer {
  id: ID
  options: [AssignmentAnswerOption]!
}

type Class implements Node {
  group: StudentGroup!
  id: String!
  name: String!
  topics(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    sort: ClassTopicsSortOrder = {key: ORDER, order: ASC}
  ): TopicConnection
}

type ClassConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ClassEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ClassEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Class
}

enum ClassTopicsOrder {
  ORDER_ASC
  ORDER_DESC
  UPDATED_ASC
  UPDATED_DESC
}

input ClassTopicsSortOrder {
  key: TopicSortKey
  order: TopicSortOrder
}

input CreateClassGroupInput {
  code: String
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addAssignmentQuestion(
    """ID of the assignment a question belongs to"""
    assignmentId: ID!
    type: AssignmentQuestionType!

    """ID of the variant a question belongs to"""
    variantId: ID!
  ): AssignmentQuestion
  addTopicAttachment(data: TopicAttachmentInput!, topicId: ID!): TopicAttachment

  """Archive assignment. Returns ID of the assignment"""
  archiveAssignment(
    """ID of the assignment to delete"""
    id: ID!
  ): ArchivedAssignment
  createAssignment(
    """
    Title of the assignment, e.g. "Home test" or "Control assignment"
    """
    title: String!

    """ID of the topic the assignment belongs to"""
    topicId: ID!
  ): Assignment
  createClass(group: CreateClassGroupInput!, name: String!): Class
  createTopic(
    """ID of the class create topic into"""
    classId: ID!
    title: String!
  ): Topic
  deleteAssignmentQuestion(
    """ID of the assignment a question belongs to"""
    assignmentId: ID!

    """ID of the question to delete"""
    questionId: ID!
  ): AssignmentQuestion
  deleteTopic(
    """ID of the topic to delete"""
    id: ID!
  ): Topic
  deleteTopicAttachment(
    """Attachment ID"""
    id: ID!
  ): TopicAttachment
  duplicateAssignmentQuestion(
    """ID of the assignment a question belongs to"""
    assignmentId: ID!

    """ID of the question to duplicate"""
    questionId: ID!
  ): AssignmentQuestion
  renameTopicAttachment(
    """Attachment ID"""
    id: ID!

    """New name for the attachment"""
    name: String!
  ): TopicAttachment
  reorderTopic(
    """ID of the topic to insert after"""
    after: ID

    """ID of the topic to insert before"""
    before: ID

    """ID of the topic to reorder"""
    id: ID!
  ): Topic
  updateAssignmentQuestion(
    """ID of the assignment a question belongs to"""
    assignmentId: ID!
    questionSettings: UpdateAssignmentQuestionInput!
  ): AssignmentQuestion
  updateClassName(id: ID!, name: String!): Class
  updateTopic(
    """ID of the topic"""
    id: ID!
    title: String
  ): Topic
}

interface Node {
  """Resource ID"""
  id: String!
}

type NumberQuestion implements AssignmentAnswer {
  hint: String
  id: ID
  label: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  assignment(
    """ID of the assignment"""
    id: ID!
  ): Assignment
  assignments(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """ID of the Class the assignments belong to"""
    classId: ID!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """ID of the Topic the assignments belong to"""
    topicId: ID
  ): AssignmentConnection
  class(id: ID!): Class
  classes(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ClassConnection
  groups(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): StudentGroupConnection
  me: User
  topic(id: ID!): Topic
}

type StudentGroup implements Node {
  code: String!
  id: String!
}

type StudentGroupConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [StudentGroupEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type StudentGroupEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: StudentGroup
}

type TextQuestion implements AssignmentAnswer {
  hint: String
  id: ID
  label: String
}

type Topic implements Node {
  attachments(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TopicAttachmentConnection
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

type TopicAttachment implements Node {
  href: String!
  id: String!
  name: String!
}

type TopicAttachmentConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TopicAttachmentEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type TopicAttachmentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: TopicAttachment
}

input TopicAttachmentInput {
  """Reference to the attachment"""
  href: String!

  """Name of the attachment"""
  name: String!
}

type TopicConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TopicEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type TopicEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Topic
}

enum TopicSortKey {
  ORDER
  UPDATED
}

"""
Sort direction, ASC = ascending (normal - latest on top), DESC = descending (reverse - oldest on top)
"""
enum TopicSortOrder {
  ASC
  DESC
}

input UpdateAssignmentQuestionInput {
  type: AssignmentQuestionType
}

type User implements Node {
  email: String
  id: String!
  image: String
  name: String
}
