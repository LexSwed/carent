/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context as Context } from "./../context"
import { core, connectionPluginCore } from "nexus"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AssignmentSectionWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  AssignmentVariantWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  ClassTopicsSortOrder: { // input type
    key?: NexusGenEnums['TopicSortKey'] | null; // TopicSortKey
    order?: NexusGenEnums['TopicSortOrder'] | null; // TopicSortOrder
  }
  CreateClassGroupInput: { // input type
    code?: string | null; // String
    id?: string | null; // String
  }
  TopicAttachmentInput: { // input type
    href: string; // String!
    name: string; // String!
  }
  UpdateAssignmentQuestionInput: { // input type
    type?: NexusGenEnums['AssignmentQuestionType'] | null; // AssignmentQuestionType
  }
}

export interface NexusGenEnums {
  AssignmentQuestionType: "Choice" | "Document" | "Image" | "Number" | "Text"
  ClassTopicsOrder: "orderKey_asc" | "orderKey_desc" | "updatedAt_asc" | "updatedAt_desc"
  TopicSortKey: "orderKey" | "updatedAt"
  TopicSortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  Assignment: { // root type
    description?: string | null; // String
    id: string; // String!
    title: string; // String!
  }
  AssignmentAnswerOption: { // root type
    content: NexusGenScalars['JSON']; // JSON!
    id: string; // String!
  }
  AssignmentConnection: { // root type
    edges?: Array<NexusGenRootTypes['AssignmentEdge'] | null> | null; // [AssignmentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  AssignmentEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Assignment'] | null; // Assignment
  }
  AssignmentQuestion: { // root type
    answers: Array<NexusGenRootTypes['AssignmentAnswer'] | null>; // [AssignmentAnswer]!
    content?: NexusGenScalars['JSON'] | null; // JSON
    correctAnswers: Array<NexusGenRootTypes['AssignmentQuestionCorrectAnswer'] | null>; // [AssignmentQuestionCorrectAnswer]!
    id: string; // String!
    score: number; // Int!
    type: NexusGenEnums['AssignmentQuestionType']; // AssignmentQuestionType!
  }
  AssignmentQuestionCorrectAnswer: { // root type
    answer: NexusGenRootTypes['AssignmentAnswer']; // AssignmentAnswer!
    id: string; // String!
  }
  AssignmentSection: { // root type
    description?: string | null; // String
    id: string; // String!
    title: string; // String!
  }
  AssignmentState: { // root type
    closedAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    open: boolean; // Boolean!
    openedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AssignmentVariant: { // root type
    id: string; // String!
    name: string; // String!
  }
  Choice: { // root type
    id?: string | null; // ID
    options: Array<NexusGenRootTypes['AssignmentAnswerOption'] | null>; // [AssignmentAnswerOption]!
  }
  Class: { // root type
    id: string; // String!
    name: string; // String!
  }
  ClassConnection: { // root type
    edges?: Array<NexusGenRootTypes['ClassEdge'] | null> | null; // [ClassEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ClassEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Class'] | null; // Class
  }
  Mutation: {};
  NumberQuestion: { // root type
    hint?: string | null; // String
    id?: string | null; // ID
    label?: string | null; // String
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  StudentGroup: { // root type
    code: string; // String!
    id: string; // String!
  }
  StudentGroupConnection: { // root type
    edges?: Array<NexusGenRootTypes['StudentGroupEdge'] | null> | null; // [StudentGroupEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  StudentGroupEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['StudentGroup'] | null; // StudentGroup
  }
  TextQuestion: { // root type
    hint?: string | null; // String
    id?: string | null; // ID
    label?: string | null; // String
  }
  Topic: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TopicAttachment: { // root type
    href: string; // String!
    id: string; // String!
    name: string; // String!
  }
  TopicAttachmentConnection: { // root type
    edges?: Array<NexusGenRootTypes['TopicAttachmentEdge'] | null> | null; // [TopicAttachmentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TopicAttachmentEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['TopicAttachment'] | null; // TopicAttachment
  }
  TopicConnection: { // root type
    edges?: Array<NexusGenRootTypes['TopicEdge'] | null> | null; // [TopicEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TopicEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Topic'] | null; // Topic
  }
  User: { // root type
    email?: string | null; // String
    id: string; // String!
    image?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
  AssignmentAnswer: NexusGenRootTypes['Choice'] | NexusGenRootTypes['NumberQuestion'] | NexusGenRootTypes['TextQuestion'];
  Node: NexusGenRootTypes['Assignment'] | NexusGenRootTypes['AssignmentAnswerOption'] | NexusGenRootTypes['AssignmentQuestion'] | NexusGenRootTypes['AssignmentQuestionCorrectAnswer'] | NexusGenRootTypes['AssignmentSection'] | NexusGenRootTypes['AssignmentState'] | NexusGenRootTypes['AssignmentVariant'] | NexusGenRootTypes['Class'] | NexusGenRootTypes['StudentGroup'] | NexusGenRootTypes['Topic'] | NexusGenRootTypes['TopicAttachment'] | NexusGenRootTypes['User'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Assignment: { // field return type
    description: string | null; // String
    id: string; // String!
    sections: NexusGenRootTypes['AssignmentSection'][]; // [AssignmentSection!]!
    state: NexusGenRootTypes['AssignmentState'] | null; // AssignmentState
    title: string; // String!
    topic: NexusGenRootTypes['Topic']; // Topic!
    variants: NexusGenRootTypes['AssignmentVariant'][]; // [AssignmentVariant!]!
  }
  AssignmentAnswerOption: { // field return type
    content: NexusGenScalars['JSON']; // JSON!
    id: string; // String!
  }
  AssignmentConnection: { // field return type
    edges: Array<NexusGenRootTypes['AssignmentEdge'] | null> | null; // [AssignmentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  AssignmentEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Assignment'] | null; // Assignment
  }
  AssignmentQuestion: { // field return type
    answers: Array<NexusGenRootTypes['AssignmentAnswer'] | null>; // [AssignmentAnswer]!
    content: NexusGenScalars['JSON'] | null; // JSON
    correctAnswers: Array<NexusGenRootTypes['AssignmentQuestionCorrectAnswer'] | null>; // [AssignmentQuestionCorrectAnswer]!
    id: string; // String!
    score: number; // Int!
    type: NexusGenEnums['AssignmentQuestionType']; // AssignmentQuestionType!
  }
  AssignmentQuestionCorrectAnswer: { // field return type
    answer: NexusGenRootTypes['AssignmentAnswer']; // AssignmentAnswer!
    id: string; // String!
  }
  AssignmentSection: { // field return type
    description: string | null; // String
    id: string; // String!
    questions: Array<NexusGenRootTypes['AssignmentQuestion'] | null>; // [AssignmentQuestion]!
    title: string; // String!
  }
  AssignmentState: { // field return type
    closedAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    open: boolean; // Boolean!
    openedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AssignmentVariant: { // field return type
    id: string; // String!
    name: string; // String!
  }
  Choice: { // field return type
    id: string | null; // ID
    options: Array<NexusGenRootTypes['AssignmentAnswerOption'] | null>; // [AssignmentAnswerOption]!
  }
  Class: { // field return type
    group: NexusGenRootTypes['StudentGroup']; // StudentGroup!
    id: string; // String!
    name: string; // String!
    topics: NexusGenRootTypes['TopicConnection'] | null; // TopicConnection
  }
  ClassConnection: { // field return type
    edges: Array<NexusGenRootTypes['ClassEdge'] | null> | null; // [ClassEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ClassEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Class'] | null; // Class
  }
  Mutation: { // field return type
    addAssignmentQuestion: NexusGenRootTypes['AssignmentQuestion'] | null; // AssignmentQuestion
    addTopicAttachment: NexusGenRootTypes['TopicAttachment'] | null; // TopicAttachment
    createAssignment: NexusGenRootTypes['Assignment'] | null; // Assignment
    createClass: NexusGenRootTypes['Class'] | null; // Class
    createTopic: NexusGenRootTypes['Topic'] | null; // Topic
    deleteAssignmentQuestion: NexusGenRootTypes['AssignmentQuestion'] | null; // AssignmentQuestion
    deleteTopic: NexusGenRootTypes['Topic'] | null; // Topic
    deleteTopicAttachment: NexusGenRootTypes['TopicAttachment'] | null; // TopicAttachment
    duplicateAssignmentQuestion: NexusGenRootTypes['AssignmentQuestion'] | null; // AssignmentQuestion
    renameTopicAttachment: NexusGenRootTypes['TopicAttachment'] | null; // TopicAttachment
    reorderTopic: NexusGenRootTypes['Topic'] | null; // Topic
    updateAssignmentQuestion: NexusGenRootTypes['AssignmentQuestion'] | null; // AssignmentQuestion
    updateClassName: NexusGenRootTypes['Class'] | null; // Class
    updateTopic: NexusGenRootTypes['Topic'] | null; // Topic
  }
  NumberQuestion: { // field return type
    hint: string | null; // String
    id: string | null; // ID
    label: string | null; // String
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    assignment: NexusGenRootTypes['Assignment'] | null; // Assignment
    assignments: NexusGenRootTypes['AssignmentConnection'] | null; // AssignmentConnection
    class: NexusGenRootTypes['Class'] | null; // Class
    classes: NexusGenRootTypes['ClassConnection'] | null; // ClassConnection
    groups: NexusGenRootTypes['StudentGroupConnection'] | null; // StudentGroupConnection
    me: NexusGenRootTypes['User'] | null; // User
    topic: NexusGenRootTypes['Topic'] | null; // Topic
  }
  StudentGroup: { // field return type
    code: string; // String!
    id: string; // String!
  }
  StudentGroupConnection: { // field return type
    edges: Array<NexusGenRootTypes['StudentGroupEdge'] | null> | null; // [StudentGroupEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  StudentGroupEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['StudentGroup'] | null; // StudentGroup
  }
  TextQuestion: { // field return type
    hint: string | null; // String
    id: string | null; // ID
    label: string | null; // String
  }
  Topic: { // field return type
    attachments: NexusGenRootTypes['TopicAttachmentConnection'] | null; // TopicAttachmentConnection
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TopicAttachment: { // field return type
    href: string; // String!
    id: string; // String!
    name: string; // String!
  }
  TopicAttachmentConnection: { // field return type
    edges: Array<NexusGenRootTypes['TopicAttachmentEdge'] | null> | null; // [TopicAttachmentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TopicAttachmentEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['TopicAttachment'] | null; // TopicAttachment
  }
  TopicConnection: { // field return type
    edges: Array<NexusGenRootTypes['TopicEdge'] | null> | null; // [TopicEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TopicEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Topic'] | null; // Topic
  }
  User: { // field return type
    email: string | null; // String
    id: string; // String!
    image: string | null; // String
    name: string | null; // String
  }
  AssignmentAnswer: { // field return type
    id: string | null; // ID
  }
  Node: { // field return type
    id: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Assignment: { // field return type name
    description: 'String'
    id: 'String'
    sections: 'AssignmentSection'
    state: 'AssignmentState'
    title: 'String'
    topic: 'Topic'
    variants: 'AssignmentVariant'
  }
  AssignmentAnswerOption: { // field return type name
    content: 'JSON'
    id: 'String'
  }
  AssignmentConnection: { // field return type name
    edges: 'AssignmentEdge'
    pageInfo: 'PageInfo'
  }
  AssignmentEdge: { // field return type name
    cursor: 'String'
    node: 'Assignment'
  }
  AssignmentQuestion: { // field return type name
    answers: 'AssignmentAnswer'
    content: 'JSON'
    correctAnswers: 'AssignmentQuestionCorrectAnswer'
    id: 'String'
    score: 'Int'
    type: 'AssignmentQuestionType'
  }
  AssignmentQuestionCorrectAnswer: { // field return type name
    answer: 'AssignmentAnswer'
    id: 'String'
  }
  AssignmentSection: { // field return type name
    description: 'String'
    id: 'String'
    questions: 'AssignmentQuestion'
    title: 'String'
  }
  AssignmentState: { // field return type name
    closedAt: 'DateTime'
    id: 'String'
    open: 'Boolean'
    openedAt: 'DateTime'
  }
  AssignmentVariant: { // field return type name
    id: 'String'
    name: 'String'
  }
  Choice: { // field return type name
    id: 'ID'
    options: 'AssignmentAnswerOption'
  }
  Class: { // field return type name
    group: 'StudentGroup'
    id: 'String'
    name: 'String'
    topics: 'TopicConnection'
  }
  ClassConnection: { // field return type name
    edges: 'ClassEdge'
    pageInfo: 'PageInfo'
  }
  ClassEdge: { // field return type name
    cursor: 'String'
    node: 'Class'
  }
  Mutation: { // field return type name
    addAssignmentQuestion: 'AssignmentQuestion'
    addTopicAttachment: 'TopicAttachment'
    createAssignment: 'Assignment'
    createClass: 'Class'
    createTopic: 'Topic'
    deleteAssignmentQuestion: 'AssignmentQuestion'
    deleteTopic: 'Topic'
    deleteTopicAttachment: 'TopicAttachment'
    duplicateAssignmentQuestion: 'AssignmentQuestion'
    renameTopicAttachment: 'TopicAttachment'
    reorderTopic: 'Topic'
    updateAssignmentQuestion: 'AssignmentQuestion'
    updateClassName: 'Class'
    updateTopic: 'Topic'
  }
  NumberQuestion: { // field return type name
    hint: 'String'
    id: 'ID'
    label: 'String'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    assignment: 'Assignment'
    assignments: 'AssignmentConnection'
    class: 'Class'
    classes: 'ClassConnection'
    groups: 'StudentGroupConnection'
    me: 'User'
    topic: 'Topic'
  }
  StudentGroup: { // field return type name
    code: 'String'
    id: 'String'
  }
  StudentGroupConnection: { // field return type name
    edges: 'StudentGroupEdge'
    pageInfo: 'PageInfo'
  }
  StudentGroupEdge: { // field return type name
    cursor: 'String'
    node: 'StudentGroup'
  }
  TextQuestion: { // field return type name
    hint: 'String'
    id: 'ID'
    label: 'String'
  }
  Topic: { // field return type name
    attachments: 'TopicAttachmentConnection'
    createdAt: 'DateTime'
    id: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  TopicAttachment: { // field return type name
    href: 'String'
    id: 'String'
    name: 'String'
  }
  TopicAttachmentConnection: { // field return type name
    edges: 'TopicAttachmentEdge'
    pageInfo: 'PageInfo'
  }
  TopicAttachmentEdge: { // field return type name
    cursor: 'String'
    node: 'TopicAttachment'
  }
  TopicConnection: { // field return type name
    edges: 'TopicEdge'
    pageInfo: 'PageInfo'
  }
  TopicEdge: { // field return type name
    cursor: 'String'
    node: 'Topic'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    image: 'String'
    name: 'String'
  }
  AssignmentAnswer: { // field return type name
    id: 'ID'
  }
  Node: { // field return type name
    id: 'String'
  }
}

export interface NexusGenArgTypes {
  Assignment: {
    sections: { // args
      after?: NexusGenInputs['AssignmentSectionWhereUniqueInput'] | null; // AssignmentSectionWhereUniqueInput
      before?: NexusGenInputs['AssignmentSectionWhereUniqueInput'] | null; // AssignmentSectionWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    variants: { // args
      after?: NexusGenInputs['AssignmentVariantWhereUniqueInput'] | null; // AssignmentVariantWhereUniqueInput
      before?: NexusGenInputs['AssignmentVariantWhereUniqueInput'] | null; // AssignmentVariantWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Class: {
    topics: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      sort: NexusGenInputs['ClassTopicsSortOrder'] | null; // ClassTopicsSortOrder
    }
  }
  Mutation: {
    addAssignmentQuestion: { // args
      assignmentId: string; // ID!
      type: NexusGenEnums['AssignmentQuestionType']; // AssignmentQuestionType!
      variantId: string; // ID!
    }
    addTopicAttachment: { // args
      data: NexusGenInputs['TopicAttachmentInput']; // TopicAttachmentInput!
      topicId: string; // ID!
    }
    createAssignment: { // args
      title: string; // String!
      topicId: string; // ID!
    }
    createClass: { // args
      group: NexusGenInputs['CreateClassGroupInput']; // CreateClassGroupInput!
      name: string; // String!
    }
    createTopic: { // args
      classId: string; // ID!
      title: string; // String!
    }
    deleteAssignmentQuestion: { // args
      assignmentId: string; // ID!
      questionId: string; // ID!
    }
    deleteTopic: { // args
      id: string; // ID!
    }
    deleteTopicAttachment: { // args
      id: string; // ID!
    }
    duplicateAssignmentQuestion: { // args
      assignmentId: string; // ID!
      questionId: string; // ID!
    }
    renameTopicAttachment: { // args
      id: string; // ID!
      name: string; // String!
    }
    reorderTopic: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      id: string; // ID!
    }
    updateAssignmentQuestion: { // args
      assignmentId: string; // ID!
      questionSettings: NexusGenInputs['UpdateAssignmentQuestionInput']; // UpdateAssignmentQuestionInput!
    }
    updateClassName: { // args
      id: string; // ID!
      name: string; // String!
    }
    updateTopic: { // args
      id: string; // ID!
      title?: string | null; // String
    }
  }
  Query: {
    assignment: { // args
      id: string; // ID!
    }
    assignments: { // args
      after?: string | null; // String
      before?: string | null; // String
      classId: string; // ID!
      first?: number | null; // Int
      last?: number | null; // Int
      topicId?: string | null; // ID
    }
    class: { // args
      id: string; // ID!
    }
    classes: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    groups: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    topic: { // args
      id: string; // ID!
    }
  }
  Topic: {
    attachments: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AssignmentAnswer: "Choice" | "NumberQuestion" | "TextQuestion"
  Node: "Assignment" | "AssignmentAnswerOption" | "AssignmentQuestion" | "AssignmentQuestionCorrectAnswer" | "AssignmentSection" | "AssignmentState" | "AssignmentVariant" | "Class" | "StudentGroup" | "Topic" | "TopicAttachment" | "User"
}

export interface NexusGenTypeInterfaces {
  Assignment: "Node"
  AssignmentAnswerOption: "Node"
  AssignmentQuestion: "Node"
  AssignmentQuestionCorrectAnswer: "Node"
  AssignmentSection: "Node"
  AssignmentState: "Node"
  AssignmentVariant: "Node"
  Choice: "AssignmentAnswer"
  Class: "Node"
  NumberQuestion: "AssignmentAnswer"
  StudentGroup: "Node"
  TextQuestion: "AssignmentAnswer"
  Topic: "Node"
  TopicAttachment: "Node"
  User: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "AssignmentAnswer" | "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}