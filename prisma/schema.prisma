generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///
model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  studentId     String?   @map("student_ud")
  student       Student?  @relation(fields: [studentId], references: [id])
  teacherId     String?   @map("teacher_id")
  teacher       Teacher?  @relation(fields: [teacherId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String    @map("workspace_id")

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Workspace {
  id    String @id @default(cuid())
  name  String
  users User[]

  @@map("workspaces")
}

model Teacher {
  id                String             @id @default(cuid())
  user              User?
  classes           Class[]
  topics            Topic[]
  assignmentsAccess AssignmentAccess[]
  students          Student[]

  @@map("teachers")
}

model Class {
  id             String       @id @default(cuid())
  teacherId      String       @map("teacher_id")
  studentGroupId String       @map("student_group_id")
  name           String
  // """Public information avaiable to students, e.g. contact lines"""
  info           String?
  active         Boolean      @default(true)
  studentGroup   StudentGroup @relation(fields: [studentGroupId], references: [id])
  teacher        Teacher      @relation(fields: [teacherId], references: [id])
  topics         Topic[]

  @@unique([id, teacherId])
  @@map("classes")
}

model Topic {
  id          String            @id @default(cuid())
  title       String
  creator     Teacher           @relation(fields: [teacherId], references: [id])
  teacherId   String            @map("teacher_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @map("updated_at")
  orderKey    String            @map("order_key")
  classId     String
  class       Class             @relation(fields: [classId], references: [id])
  archivedAt  DateTime?         @map("archived_at")
  assignments Assignment[]
  attachments TopicAttachment[]

  @@unique([id, teacherId])
  @@map("topics")
}

model StudentGroup {
  id       String    @id @default(cuid())
  code     String
  classes  Class[]
  students Student[]

  @@map("student_groups")
}

model Student {
  id          String             @id @default(cuid())
  user        User?
  teacherId   String             @map("teacher_id")
  addedBy     Teacher            @relation(fields: [teacherId], references: [id])
  group       StudentGroup[]
  assignments AssignmentAccess[]

  @@map("students")
}

model TopicAttachment {
  id        String   @id @default(cuid())
  topic     Topic    @relation(fields: [topicId], references: [id])
  href      String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  // maybe will be used in the future to make some attachments private
  public    Boolean  @default(true)
  topicId   String   @map("topic_id")
}

model Assignment {
  id          String              @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  archivedAt  DateTime?           @map("archived_at")
  creatorId   String              @map("creator_id")
  topic       Topic               @relation(fields: [topicId], references: [id])
  topicId     String              @map("topic_id")
  sections    AssignmentSection[]
  variants    AssignmentVariant[]
  state       AssignmentState?

  @@unique([id, creatorId])
  @@map("assignments")
}

model AssignmentState {
  id           String     @id @default(cuid())
  open         Boolean    @default(false)
  openedAt     DateTime   @default(now()) @map("opened_at")
  closedAt     DateTime   @default(now()) @map("closed_at")
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String

  @@map("assignment_states")
}

model AssignmentSection {
  id           String               @id @default(cuid())
  title        String
  description  String?
  questions    AssignmentQuestion[]
  assignment   Assignment           @relation(fields: [assignmentId], references: [id])
  assignmentId String               @map("assignment_id")
  createdAt    DateTime             @default(now()) @map("created_at")

  @@map("assignment_sections")
}

model AssignmentQuestion {
  id                  String                            @id @default(cuid())
  orderKey            String                            @map("order_key")
  assignmentSection   AssignmentSection                 @relation(fields: [assignmentSectionId], references: [id])
  assignmentSectionId String                            @map("assignment_section_id")
  score               Int                               @default(0)
  content             Json?
  answers             AssignmentAnswerOption[]
  correctAnswers      AssignmentQuestionCorrectAnswer[]
  type                AssignmentQuestionType
  variantId           String                            @map("variant_id")
  variant             AssignmentVariant                 @relation(fields: [variantId], references: [id])
  createdAt           DateTime                          @default(now()) @map("created_at")
  updatedAt           DateTime                          @default(now()) @map("updated_at")

  @@map("assignment_question_blocks")
}

enum AssignmentQuestionType {
  Choice
  Text
  Number
  Image
  Document
}

model AssignmentAnswerOption {
  id          String  @id @default(cuid())
  content     Json
  textContent String
  hint        String?

  assignmentQuestionId            String
  assignmentQuestion              AssignmentQuestion               @relation(fields: [assignmentQuestionId], references: [id])
  assignmentQuestionCorrectAnswer AssignmentQuestionCorrectAnswer?

  @@map("assignment_question_answer_options")
}

model AssignmentQuestionCorrectAnswer {
  id                   String                 @id @default(cuid())
  assignmentQuestionId String                 @map("assignment_question_id")
  question             AssignmentQuestion     @relation(fields: [assignmentQuestionId], references: [id])
  answerOptionId       String                 @map("answer_id")
  answer               AssignmentAnswerOption @relation(fields: [answerOptionId], references: [id])

  @@map("assignment_questions_correct_answers")
}

model AssignmentVariant {
  id                 String               @id @default(cuid())
  name               String
  assignmentId       String               @map("assignment_id")
  assignment         Assignment           @relation(fields: [assignmentId], references: [id])
  assignedUsers      AssignmentAccess[]
  assignmentQuestion AssignmentQuestion[]

  @@map("assignment_variants")
}

model AssignmentAccess {
  id                  String            @id @default(cuid())
  assignmentId        String            @map("assignment_id")
  student             Student           @relation(fields: [studentId], references: [id])
  studentId           String            @map("student_id")
  assignmentVariant   AssignmentVariant @relation(fields: [assignmentVariantId], references: [id])
  assignmentVariantId String            @map("assignment_variant_id")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @default(now()) @map("updated_at")
  givenBy             Teacher           @relation(fields: [teacherId], references: [id])
  givenByTeacherId    String            @map("given_by_user_id")
  teacherId           String

  @@map("assignment_accesses")
}
