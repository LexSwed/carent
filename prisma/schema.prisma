generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///
model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  student       Student?
  teacher       Teacher?
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Workspace {
  id    String @id @default(cuid())
  name  String
  users User[]
}

model Teacher {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  user             User               @relation(fields: [userId], references: [id])
  classes          Class[]
  topics           Topic[]
  assignmentAccess AssignmentAccess[]

  @@unique([id, userId])
}

model Class {
  id             String       @id @default(cuid())
  teacherId      String       @map("teacher_id")
  studentGroupId String       @map("student_group_id")
  name           String
  active         Boolean      @default(true)
  studentGroup   StudentGroup @relation(fields: [studentGroupId], references: [id])
  teacher        Teacher      @relation(fields: [teacherId], references: [id])
  topics         Topic[]

  @@unique([id, teacherId])
}

model Topic {
  id          String       @id @default(cuid())
  title       String
  creator     Teacher      @relation(fields: [teacherId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @map("updated_at")
  classId     String
  hidden      Boolean      @default(true)
  orderKey    String       @map("order_key")
  class       Class        @relation(fields: [classId], references: [id])
  archivedAt  DateTime?    @map("archived_at")
  teacherId   String       @map("teacher_id")
  assignments Assignment[]

  @@unique([id, teacherId])
}

model StudentGroup {
  id       String    @id @default(cuid())
  code     String
  classes  Class[]
  students Student[]
}

model Student {
  id          String             @id @default(cuid())
  userId      String             @unique @map("user_id")
  users       User               @relation(fields: [userId], references: [id])
  group       StudentGroup[]
  assignments AssignmentAccess[]
}

model Assignment {
  id         String              @id @default(cuid())
  name       String
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @default(now()) @map("updated_at")
  archivedAt DateTime?           @default(now()) @map("archived_at")
  creatorId  String              @map("creator_id")
  topic      Topic               @relation(fields: [topicId], references: [id])
  topicId    String              @map("topic_id")
  sections   AssignmentSection[]
  variants   AssignmentVariant[]
}

model AssignmentSection {
  id           String                    @id @default(cuid())
  name         String
  questions    AssignmentQuestionBlock[]
  assignment   Assignment?               @relation(fields: [assignmentId], references: [id])
  assignmentId String?                   @map("assignment_id")
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @default(now()) @map("updated_at")
}

model AssignmentQuestionBlock {
  id                   String                         @id @default(cuid())
  title                String
  question             AssignmentQuestion             @relation(fields: [assignmentQuestionId], references: [id])
  layout               Layout                         @relation(fields: [layoutId], references: [id])
  weight               Float
  images               AssignmentQuestionBlockImage[]
  orderKey             String                         @map("order_key")
  assignmentSection    AssignmentSection              @relation(fields: [assignmentSectionId], references: [id])
  assignmentSectionId  String                         @map("assignment_section_id")
  createdAt            DateTime                       @default(now()) @map("created_at")
  updatedAt            DateTime                       @default(now()) @map("updated_at")
  layoutId             String                         @map("layout_id")
  assignmentQuestionId String
}

model AssignmentQuestionBlockImage {
  id                        String                   @id @default(cuid())
  url                       String
  label                     String
  questionBlock             AssignmentQuestionBlock? @relation(fields: [assignmentQuestionBlockId], references: [id])
  assignmentQuestionBlockId String?                  @map("assignment_question_block_id")
}

model AssignmentQuestion {
  id                  String                            @id @default(cuid())
  task                Json
  type                AssignmentQuestionType
  block               AssignmentQuestionBlock[]
  variant             AssignmentVariant                 @relation(fields: [assignmentVariantId], references: [id])
  assignmentVariantId String                            @map("assignment_variant_id")
  correctAnswers      AssignmentQuestionCorrectAnswer[]
}

model AssignmentQuestionCorrectAnswer {
  id                   String                   @id @default(cuid())
  questionId           AssignmentQuestion       @relation(fields: [assignmentQuestionId], references: [id])
  correctOptions       AssignmentAnswerOption[]
  assignmentQuestionId String                   @map("assignment_question_id")
}

enum AssignmentQuestionType {
  OneOf
  Multiple
  Text
  Image
  Document
}

model AssignmentAnswerOption {
  id                                String                           @id @default(cuid())
  title                             String
  descrition                        String
  orderKey                          String
  imageUrl                          String?
  maxLenght                         String?
  correctToQuestion                 AssignmentQuestionCorrectAnswer? @relation(fields: [assignmentQuestionCorrectAnswerId], references: [id])
  assignmentQuestionCorrectAnswerId String?                          @map("assignment_question_correct_answer_id")
}

model AssignmentVariant {
  id            String               @id @default(cuid())
  assignment    Assignment           @relation(fields: [assignmentId], references: [id])
  questions     AssignmentQuestion[]
  assignedUsers AssignmentAccess[]
  assignmentId  String               @map("assignment_id")
}

model AssignmentAccess {
  id                  String            @id @default(cuid())
  assignmentId        String            @map("assignment_id")
  student             Student           @relation(fields: [studentId], references: [id])
  studentId           String            @map("student_id")
  assignmentVariant   AssignmentVariant @relation(fields: [assignmentVariantId], references: [id])
  assignmentVariantId String            @map("assignment_variant_id")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @default(now()) @map("updated_at")
  givenBy             Teacher           @relation(fields: [teacherId], references: [id])
  givenByTeacherId    String            @map("given_by_user_id")
  teacherId           String
}

model Layout {
  id        String                    @id @default(cuid())
  name      String
  iconName  String                    @map("icon_name")
  questions AssignmentQuestionBlock[]
}
